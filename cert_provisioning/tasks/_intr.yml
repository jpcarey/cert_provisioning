---
# intermediate setup steps
- set_fact:
    intr_slash: "{{ intermediate.DN.split(';') | reverse | join('/') }}"
    # C=US/O=Carey Ltd/CN=Carey Ltd CA
    intr_cn: "{{ intermediate.DN | regex_replace('^CN=(.*?)(;.*)?$', '\\1') }}"
    # Carey Ltd CA
- set_fact:
    intr_cn_filename: "{{ intr_cn | regex_replace(' ', '_') }}"
    # Carey_Ltd_CA

- debug: var=root_pass
- name: "{{ authority_cn }} |Update signing authority and chain"
  set_fact:
    signer_name: "{{ authority_chain | basename }}"
    signer_conf: "{{ playbook_dir }}/.openssl/{{ authority_chain }}/openssl-{{ authority_chain | basename }}.cnf"
    signer_path: "{{ playbook_dir }}/.openssl/{{ authority_chain }}"
    signer_pass: "{{ lookup('password', '{{ playbook_dir }}/.openssl/{{ authority_chain }}/private/password.txt') }}"
    authority_chain: "{{ authority_chain }}/{{ intr_cn_filename }}"

# - debug: var=signer_name
# - debug: var=signer_conf
# - debug: var=signer_path
# - debug: var=authority_chain

- name: "{{ authority_cn }} |Set current authority info"
  set_fact:
    authority_conf: "{{ playbook_dir }}/.openssl/{{ authority_chain }}/openssl-{{ authority_chain | basename }}.cnf"
    authority_path: "{{ playbook_dir }}/.openssl/{{ authority_chain }}"
    authority_cn: "{{ intr_cn }}"
    authority_slash: "{{ intr_slash }}"
    authority_cn_filename: "{{ intr_cn_filename }}"
    authority_pass: "{{ lookup('password', '{{ playbook_dir }}/.openssl/{{ authority_chain }}/private/password.txt') }}"


# - debug: var=authority_conf
# - debug: var=authority_path
# - debug: var=authority_cn
# - debug: var=authority_slash
# - debug: var=authority_cn_filename

- name: "{{ authority_cn }} |Include folder setup"
  include: setup_files.yml

- name: "{{ authority_cn }} |Init starting CRL number"
  copy: content="1000" dest="{{ authority_path }}/crlnumber"

- name: "{{ authority_cn }} |Generate OpenSSL config file"
  template: src=templates/openssl-intr.cnf.j2 dest={{ authority_conf }}

- name: "{{ authority_cn }} |Generate private key"
  command: >
    openssl genrsa -aes256 -passout pass:{{ authority_pass }}
    -out "{{ authority_path }}/private/{{ authority_cn_filename }}.key" 4096
  args:
    creates: '{{ authority_path }}/private/{{ authority_cn_filename }}.key'

- name: "{{ authority_cn }} |Generate cert signing request (csr)"
  command: >
    openssl req -config "{{ authority_conf }}" -new -passin pass:{{ authority_pass }}
    -subj "/{{ authority_slash }}" -sha256
    -key "{{ authority_path }}/private/{{ authority_cn_filename }}.key"
    -out "{{ authority_path }}/csr/{{ authority_cn_filename }}.csr.pem"
  args:
    creates: '{{ authority_path }}/csr/{{ authority_cn_filename }}.csr.pem'

- name: "{{ authority_cn }} |Sign csr by authority: {{ signer_name }}"
  command: >
    openssl ca -batch -config "{{ signer_conf }}" -extensions v3_intermediate_ca
    -passin pass:{{ signer_pass }} -days 3650 -notext -md sha256
    -in "{{ authority_path }}/csr/{{ authority_cn_filename }}.csr.pem"
    -out "{{ authority_path }}/certs/{{ authority_cn_filename }}.crt"
  args:
    creates: '{{ authority_path }}/certs/{{ authority_cn_filename }}.crt'

#####
# TODO: should find a better way to determine if it is a root CA
#####
- stat: path={{ signer_path }}/certs/{{ signer_path | basename }}-chain.crt
  register: chain
- set_fact:
    chain_file: "{{ signer_path + '/certs/' + signer_path|basename + '.crt' if not chain.stat.exists else chain.stat.path }}"

- name: "{{ authority_cn }} |Create cert chain file"
  shell: >
    cat "{{ authority_path }}/certs/{{ authority_cn_filename }}.crt"
    "{{ chain_file }}" > "{{ authority_path }}/certs/{{ authority_cn_filename }}-chain.crt"
  args:
    creates: '{{ authority_path }}/certs/{{ authority_cn_filename }}-chain.crt'

- name: "{{ authority_cn }} |Setup output folder"
  file: path={{ playbook_dir }}/certs/{{ authority_chain }}/ state=directory

- name: "{{ authority_cn }} |Copy to output folder"
  copy:
    src: '{{ item.s }}'
    dest: '{{ item.d }}'
    remote_src: true
  with_items:
    - {
        s: '{{ authority_path }}/certs/{{ authority_cn_filename }}.crt',
        d: '{{ playbook_dir }}/certs/{{ authority_chain }}/{{ authority_cn_filename }}.crt'
      }
    - {
        s: '{{ authority_path }}/certs/{{ authority_cn_filename }}-chain.crt',
        d: '{{ playbook_dir }}/certs/{{ authority_chain }}/{{ authority_cn_filename }}-chain.crt'
      }

# # Intermediate truststore
# - name: Java Keytool | Truststore Intermediate
#   command: 'keytool -importcert -noprompt -alias my_intr \
#     -keystore truststore.jks  -storepass password -keypass password \
#     -file {{ playbook_dir }}/certs/ca/intermediate/certs/intermediate.crt'
#   args:
#     chdir: '{{ playbook_dir }}/certs/keytool'
#   register: trust_intr
#   changed_when: trust_intr.rc == 0
#   ignore_errors: true
